AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  DynamoTableName:
    Type: String
  DynamoTestTableName:
    Type: String
  SnsName:
    Type: String
  SqsName:
    Type: String

Resources:
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref S3BucketName

  TestDynamoTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: slackUserId
          AttributeType: S
      KeySchema:
        - AttributeName: slackUserId
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3
      TableName: !Ref DynamoTestTableName

  SnsTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: !Ref SnsName

  SnsTopicSubscription:
    DependsOn:
      - SnsTopic
      - Sqs
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt Sqs.Arn
      Protocol: sqs
      TopicArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SnsName}

  Sqs:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Ref SqsName

  SqsPolicy:
    DependsOn:
      - Sqs
      - SnsTopic
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Id: "Subscribe to SNS"
        Statement:
          - Effect: Allow
            Action: "SQS:SendMessage"
            Principal:
              AWS: "*"
            Resource: !GetAtt Sqs.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SnsName}
      Queues:
        - !Sub https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${SqsName}
